//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(YahooScraper.Models.HapStocksContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsdd14530b99f68267e81cd6890d6cec0c109351d0250834624637cd8bf6d5c990))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySetsdd14530b99f68267e81cd6890d6cec0c109351d0250834624637cd8bf6d5c990 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "dd14530b99f68267e81cd6890d6cec0c109351d0250834624637cd8bf6d5c990"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "StocksModelStoreContainer.StockTable")
            {
                return GetView0();
            }

            if (extentName == "HapStocksContext.StockTables")
            {
                return GetView1();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for StocksModelStoreContainer.StockTable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing StockTable
        [StocksModel.Store.StockTable](T1.StockTable_ID, T1.StockTable_DateStamp, T1.StockTable_Symbol, T1.StockTable_LastPrice, T1.StockTable_Change, T1.StockTable_ChgPc, T1.StockTable_MarketTime, T1.StockTable_Volume, T1.StockTable_AvgVol3m, T1.StockTable_MarketCap, T1.StockTable_Method)
    FROM (
        SELECT 
            T.ID AS StockTable_ID, 
            T.DateStamp AS StockTable_DateStamp, 
            T.Symbol AS StockTable_Symbol, 
            T.LastPrice AS StockTable_LastPrice, 
            T.Change AS StockTable_Change, 
            T.ChgPc AS StockTable_ChgPc, 
            T.MarketTime AS StockTable_MarketTime, 
            T.Volume AS StockTable_Volume, 
            T.AvgVol3m AS StockTable_AvgVol3m, 
            T.MarketCap AS StockTable_MarketCap, 
            T.Method AS StockTable_Method, 
            True AS _from0
        FROM HapStocksContext.StockTables AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HapStocksContext.StockTables.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing StockTables
        [StocksModel.StockTable](T1.StockTable_ID, T1.StockTable_DateStamp, T1.StockTable_Symbol, T1.StockTable_LastPrice, T1.StockTable_Change, T1.StockTable_ChgPc, T1.StockTable_MarketTime, T1.StockTable_Volume, T1.StockTable_AvgVol3m, T1.StockTable_MarketCap, T1.StockTable_Method)
    FROM (
        SELECT 
            T.ID AS StockTable_ID, 
            T.DateStamp AS StockTable_DateStamp, 
            T.Symbol AS StockTable_Symbol, 
            T.LastPrice AS StockTable_LastPrice, 
            T.Change AS StockTable_Change, 
            T.ChgPc AS StockTable_ChgPc, 
            T.MarketTime AS StockTable_MarketTime, 
            T.Volume AS StockTable_Volume, 
            T.AvgVol3m AS StockTable_AvgVol3m, 
            T.MarketCap AS StockTable_MarketCap, 
            T.Method AS StockTable_Method, 
            True AS _from0
        FROM StocksModelStoreContainer.StockTable AS T
    ) AS T1");
        }
    }
}
